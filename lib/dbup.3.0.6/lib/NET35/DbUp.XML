<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DbUp</name>
    </assembly>
    <members>
        <member name="T:StandardExtensions">
            <summary>
            Configuration extensions for the standard stuff.
            </summary>
        </member>
        <member name="M:StandardExtensions.LogTo(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.Output.IUpgradeLog)">
            <summary>
            Logs to a custom logger.
            </summary>
            <param name="builder"></param>
            <param name="log">The logger.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.LogToConsole(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Logs to the console using pretty colours.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.LogScriptOutput(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Logs to the console using pretty colours.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.LogToTrace(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Logs to System.Diagnostics.Trace.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.JournalTo(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.IJournal)">
            <summary>
            Uses a custom journal for recording which scripts were executed.
            </summary>
            <param name="builder">The builder.</param>
            <param name="journal">The custom journal.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScripts(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.IScriptProvider)">
            <summary>
            Adds a custom script provider to the upgrader.
            </summary>
            <param name="builder">The builder.</param>
            <param name="scriptProvider">The script provider.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScripts(DbUp.Builder.UpgradeEngineBuilder,System.Collections.Generic.IEnumerable{DbUp.Engine.SqlScript})">
            <summary>
            Adds a static set of scripts to the upgrader.
            </summary>
            <param name="builder">The builder.</param>
            <param name="scripts">The scripts.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScripts(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.SqlScript[])">
            <summary>
            Adds a static set of scripts to the upgrader.
            </summary>
            <param name="builder">The builder.</param>
            <param name="scripts">The scripts.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScript(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.SqlScript)">
            <summary>
            Adds a single static script to the upgrader.
            </summary>
            <param name="builder">The builder.</param>
            <param name="script">The script.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScript(DbUp.Builder.UpgradeEngineBuilder,System.String,System.String)">
            <summary>
            Adds a single static script to the upgrader.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name of the script. This should never change once executed.</param>
            <param name="contents">The script body.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScriptsFromFileSystem(DbUp.Builder.UpgradeEngineBuilder,System.String)">
            <summary>
            Adds all scripts from a folder on the file system.
            </summary>
            <param name="builder">The builder.</param>
            <param name="path">The directory path.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScriptsEmbeddedInAssembly(DbUp.Builder.UpgradeEngineBuilder,System.Reflection.Assembly)">
            <summary>
            Adds all scripts found as embedded resources in the given assembly.
            </summary>
            <param name="builder">The builder.</param>
            <param name="assembly">The assembly.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScriptsEmbeddedInAssembly(DbUp.Builder.UpgradeEngineBuilder,System.Reflection.Assembly,System.Func{System.String,System.Boolean})">
            <summary>
            Adds all scripts found as embedded resources in the given assembly, with a custom filter (you'll need to exclude non- .SQL files yourself).
            </summary>
            <param name="builder">The builder.</param>
            <param name="assembly">The assembly.</param>
            <param name="filter">The filter. Don't forget to ignore any non- .SQL files.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScriptsAndCodeEmbeddedInAssembly(DbUp.Builder.UpgradeEngineBuilder,System.Reflection.Assembly)">
            <summary>
            Adds all scripts found as embedded resources in the given assembly, or classes which inherit from IScript, with a custom filter (you'll need to exclude non- .SQL files yourself).
            </summary>
            <param name="builder">The builder.</param>
            <param name="assembly">The assembly.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithScriptsAndCodeEmbeddedInAssembly(DbUp.Builder.UpgradeEngineBuilder,System.Reflection.Assembly,System.Func{System.String,System.Boolean})">
            <summary>
            Adds all scripts found as embedded resources in the given assembly, or classes which inherit from IScript, with a custom filter (you'll need to exclude non- .SQL files yourself).
            </summary>
            <param name="builder">The builder.</param>
            <param name="assembly">The assembly.</param>
            <param name="filter">The Sql Script filter (only affects embdeeded scripts, does not filter IScript files). Don't forget to ignore any non- .SQL files.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithPreprocessor(DbUp.Builder.UpgradeEngineBuilder,DbUp.Engine.IScriptPreprocessor)">
            <summary>
            Adds a preprocessor that can replace portions of a script.
            </summary>
            <param name="builder">The builder.</param>
            <param name="preprocessor">The preprocessor.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithVariables(DbUp.Builder.UpgradeEngineBuilder,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a set of variables that will be replaced before scripts are executed.
            </summary>
            <param name="builder">The builder.</param>
            <param name="variables">The variables.</param>
            <returns>
            The same builder
            </returns>
        </member>
        <member name="M:StandardExtensions.WithVariable(DbUp.Builder.UpgradeEngineBuilder,System.String,System.String)">
            <summary>
            Adds a single variable that will be replaced before scripts are executed.
            </summary>
            <param name="builder">The builder.</param>
            <param name="variableName">The name of the variable.</param>
            <param name="value">The value to be substituted.</param>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithVariablesDisabled(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Sets a configuration flag which will cause the engine to skip variable expansion.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithVariablesEnabled(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Sets a configuration flag which will cause the engine to perform variable expansion.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithExecutionTimeout(DbUp.Builder.UpgradeEngineBuilder,System.Nullable{System.TimeSpan})">
            <summary>
            Allows you to set the execution timeout for scripts.
            </summary>
            <param name="builder">The builder.</param>
            <param name="timeout">A <c>TimeSpan</c> value containing the timeout value or <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The timeout value is less than zero or greater than 2,147,483,647 seconds.</exception>
            <remarks>Setting the timeout parameter to <c>null</c> will use the default timeout of the underlying provider.</remarks>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithoutTransaction(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Run creates a new connection for each script, without a transaction
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithTransaction(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Run DbUp in a single transaction
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:StandardExtensions.WithTransactionPerScript(DbUp.Builder.UpgradeEngineBuilder)">
            <summary>
            Run each script in it's own transaction
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:DbUp.Builder.UpgradeConfiguration">
            <summary>
            Represents the configuration of an UpgradeEngine.
            </summary>
        </member>
        <member name="M:DbUp.Builder.UpgradeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Builder.UpgradeConfiguration"/> class.
            </summary>
        </member>
        <member name="M:DbUp.Builder.UpgradeConfiguration.Validate">
            <summary>
            Ensures all expectations have been met regarding this configuration.
            </summary>
        </member>
        <member name="M:DbUp.Builder.UpgradeConfiguration.AddVariables(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds variables to the configuration which will be substituted for every script
            </summary>
            <param name="newVariables">The variables </param>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.ConnectionManager">
            <summary>
            Manages your database connections, allowing you to control the use of transactions and the behaviour of those transactions
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.Log">
            <summary>
            Gets or sets a log which captures details about the upgrade.
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.ScriptProviders">
            <summary>
            Gets a mutable list of script providers.
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.ScriptPreprocessors">
            <summary>
            Gets a mutable list of script pre-processors.
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.Journal">
            <summary>
            Gets or sets the journal, which tracks the scripts that have already been run.
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.ScriptExecutor">
            <summary>
            Gets or sets the script executor, which runs scripts against the underlying database.
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.Variables">
            <summary>
            A collection of variables to be replaced in scripts before they are run
            </summary>
        </member>
        <member name="P:DbUp.Builder.UpgradeConfiguration.VariablesEnabled">
            <summary>
            Determines if variables should be replaced in scripts before they are run.
            </summary>
        </member>
        <member name="T:DbUp.Builder.UpgradeEngineBuilder">
            <summary>
            Builds a UpgradeEngine by accepting a list of callbacks to execute. For custom configuration, you should 
            implement extension methods on top of this class.
            </summary>
        </member>
        <member name="M:DbUp.Builder.UpgradeEngineBuilder.Configure(System.Action{DbUp.Builder.UpgradeConfiguration})">
            <summary>
            Adds a callback that will be run to configure the upgrader when Build is called.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:DbUp.Builder.UpgradeEngineBuilder.Build">
            <summary>
            Creates an UpgradeEngine based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbUp.DeployChanges">
            <summary>
            A fluent builder for creating database upgraders.
            </summary>
        </member>
        <member name="P:DbUp.DeployChanges.To">
            <summary>
            Returns the databases supported by DbUp.
            </summary>
        </member>
        <member name="T:DbUp.Engine.Transactions.DatabaseConnectionManager">
            <summary>
            Manages Sql Database Connections
            </summary>
        </member>
        <member name="T:DbUp.Engine.Transactions.IConnectionManager">
            <summary>
            Allows you to run an operation with a managed connection
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.IConnectionManager.OperationStarting(DbUp.Engine.Output.IUpgradeLog,System.Collections.Generic.List{DbUp.Engine.SqlScript})">
            <summary>
            Tells the connection manager it is starting an operation
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.IConnectionManager.ExecuteCommandsWithManagedConnection(System.Action{System.Func{System.Data.IDbCommand}})">
            <summary>
            Execute a lambda with the connection managed by the connection manager (i.e transactions, reusing connections etc)
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:DbUp.Engine.Transactions.IConnectionManager.ExecuteCommandsWithManagedConnection``1(System.Func{System.Func{System.Data.IDbCommand},``0})">
            <summary>
            Execute a lambda with the connection managed by the connection manager (i.e transactions, reusing connections etc)
            </summary>
            <param name="actionWithResult">Action to execute</param>
        </member>
        <member name="M:DbUp.Engine.Transactions.IConnectionManager.SplitScriptIntoCommands(System.String)">
            <summary>
            Scripts often have multiple statements which have to be executed in their own commands.
            
            For example, MSSQL splits on GO, SQLite splits on ; etc.
            </summary>
        </member>
        <member name="P:DbUp.Engine.Transactions.IConnectionManager.TransactionMode">
            <summary>
            Specifies the transaction strategy
            </summary>
        </member>
        <member name="P:DbUp.Engine.Transactions.IConnectionManager.IsScriptOutputLogged">
            <summary>
            Specifies whether the db script output should be logged
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.#ctor">
            <summary>
            Manages Database Connections
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.CreateConnection(DbUp.Engine.Output.IUpgradeLog)">
            <summary>
            Creates a database connection for the current database engine
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.OperationStarting(DbUp.Engine.Output.IUpgradeLog,System.Collections.Generic.List{DbUp.Engine.SqlScript})">
            <summary>
            Tells the connection manager is starting
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.ExecuteCommandsWithManagedConnection(System.Action{System.Func{System.Data.IDbCommand}})">
            <summary>
            Executes an action using the specfied transaction mode 
            </summary>
            <param name="action">The action to execute</param>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.ExecuteCommandsWithManagedConnection``1(System.Func{System.Func{System.Data.IDbCommand},``0})">
            <summary>
            Executes an action which has a result using the specfied transaction mode 
            </summary>
            <param name="actionWithResult">The action to execute</param>
            <typeparam name="T">The result type</typeparam>
            <returns>The result of the command</returns>
        </member>
        <member name="M:DbUp.Engine.Transactions.DatabaseConnectionManager.SplitScriptIntoCommands(System.String)">
            <summary>
            Splits a script into commands, for example SQL Server separates command by the GO statement
            </summary>
            <param name="scriptContents">The script</param>
            <returns>A list of SQL Commands</returns>
        </member>
        <member name="P:DbUp.Engine.Transactions.DatabaseConnectionManager.TransactionMode">
            <summary>
            The transaction strategy that DbUp should use
            </summary>
        </member>
        <member name="P:DbUp.Engine.Transactions.DatabaseConnectionManager.IsScriptOutputLogged">
            <summary>
            Specifies whether the db script output should be logged
            </summary>
        </member>
        <member name="T:DbUp.Engine.IScript">
            <summary>
            A class which represents a script, allowing you to dynamically generate a sql script at runtime
            </summary>
        </member>
        <member name="M:DbUp.Engine.IScript.ProvideScript(System.Func{System.Data.IDbCommand})">
            <summary>
            Provides the Sql Script to execute
            </summary>
            <param name="dbCommandFactory">A factory to create open and active database commands</param>
            <returns>The Sql Script contents</returns>
        </member>
        <member name="T:DbUp.Engine.Transactions.ITransactionStrategy">
            <summary>
            The transaction strategy being to be used by the DatabaseConnectionManager
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.ITransactionStrategy.Execute(System.Action{System.Func{System.Data.IDbCommand}})">
            <summary>
            Executes an action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DbUp.Engine.Transactions.ITransactionStrategy.Execute``1(System.Func{System.Func{System.Data.IDbCommand},``0})">
            <summary>
            Executes an action which has a result
            </summary>
            <param name="actionWithResult"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DbUp.Engine.Transactions.ITransactionStrategy.Initialise(System.Data.IDbConnection,DbUp.Engine.Output.IUpgradeLog,System.Collections.Generic.List{DbUp.Engine.SqlScript})">
            <summary>
            Initialises the transaction strategy with the upgrade log
            </summary>
        </member>
        <member name="T:DbUp.Engine.LazySqlScript">
            <summary>
            Represents a SQL Server script that is fetched at execution time, rather than discovery time
            </summary>
        </member>
        <member name="T:DbUp.Engine.SqlScript">
            <summary>
            Represents a SQL Server script that comes from an embedded resource in an assembly. 
            </summary>
        </member>
        <member name="M:DbUp.Engine.SqlScript.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Engine.SqlScript"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:DbUp.Engine.SqlScript.FromFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Engine.SqlScript.FromStream(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="scriptName"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:DbUp.Engine.SqlScript.Contents">
            <summary>
            Gets the contents of the script.
            </summary>
            <value></value>
        </member>
        <member name="P:DbUp.Engine.SqlScript.Name">
            <summary>
            Gets the name of the script.
            </summary>
            <value></value>
        </member>
        <member name="M:DbUp.Engine.LazySqlScript.#ctor(System.String,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Engine.LazySqlScript"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="contentProvider">The delegate which creates the content at execution time.</param>
        </member>
        <member name="P:DbUp.Engine.LazySqlScript.Contents">
            <summary>
            Gets the contents of the script.
            </summary>
            <value></value>
        </member>
        <member name="T:DbUp.Engine.Preprocessors.StripSchemaPreprocessor">
            <summary>
            Used for database engines that do not support schema's, it will remove $schema$. from all scripts
            </summary>
        </member>
        <member name="T:DbUp.Engine.IScriptPreprocessor">
            <summary>
            Preprocessor that executes before scripts are executed against the database
            </summary>
        </member>
        <member name="M:DbUp.Engine.IScriptPreprocessor.Process(System.String)">
            <summary>
            Performs some proprocessing step on a script
            </summary>
        </member>
        <member name="M:DbUp.Engine.Preprocessors.StripSchemaPreprocessor.Process(System.String)">
            <summary>
            Performs some proprocessing step on a script
            </summary>
        </member>
        <member name="T:DbUp.Engine.Transactions.TransactionMode">
            <summary>
            The transaction strategy to use
            </summary>
        </member>
        <member name="F:DbUp.Engine.Transactions.TransactionMode.NoTransaction">
            <summary>
            Run creates a new connection for each script, without a transaction
            </summary>
        </member>
        <member name="F:DbUp.Engine.Transactions.TransactionMode.SingleTransaction">
            <summary>
            DbUp will run using a single transaction for the whole upgrade operation
            </summary>
        </member>
        <member name="F:DbUp.Engine.Transactions.TransactionMode.TransactionPerScript">
            <summary>
            DbUp will create a new connection and transaction per script
            </summary>
        </member>
        <member name="T:DbUp.Helpers.NullJournal">
            <summary>
            Enables multiple executions of omnipotent scripts.
            </summary>
        </member>
        <member name="T:DbUp.Engine.IJournal">
            <summary>
            This interface is provided to allow different projects to store version information differently.
            </summary>
        </member>
        <member name="M:DbUp.Engine.IJournal.GetExecutedScripts">
            <summary>
            Recalls the version number of the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DbUp.Engine.IJournal.StoreExecutedScript(DbUp.Engine.SqlScript)">
            <summary>
            Records an upgrade script for a database.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:DbUp.Helpers.NullJournal.GetExecutedScripts">
            <summary>
            Returns an empty array of length 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:DbUp.Helpers.NullJournal.StoreExecutedScript(DbUp.Engine.SqlScript)">
            <summary>
            Does not store the script, simply returns
            </summary>
            <param name="script"></param>
        </member>
        <member name="T:DbUp.Support.SqlServer.SqlConnectionManager">
            <summary>
            Manages Sql Database Connections
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlConnectionManager.#ctor(System.String)">
            <summary>
            Manages Sql Database Connections
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="T:DbUp.Helpers.AdHocSqlRunner">
            <summary>
            A helper for executing SQL queries easily.
            </summary>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.#ctor(System.Func{System.Data.IDbCommand},System.String,DbUp.Engine.IScriptPreprocessor[])">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Helpers.AdHocSqlRunner"/> class.
            </summary>
            <param name="commandFactory">The command factory.</param>
            <param name="schema">The schema.</param>
            <param name="additionalScriptPreprocessors">The additional script preprocessors.</param>
            <remarks>Sets the <c>variablesEnabled</c> setting to <c>true</c>.</remarks>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.#ctor(System.Func{System.Data.IDbCommand},System.String,System.Func{System.Boolean},DbUp.Engine.IScriptPreprocessor[])">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Helpers.AdHocSqlRunner"/> class.
            </summary>
            <param name="commandFactory">The command factory.</param>
            <param name="schema">The schema.</param>
            <param name="variablesEnabled">Function indicating <c>true</c> if variables should be replaced, <c>false</c> otherwise.</param>
            <param name="additionalScriptPreprocessors">The additional script preprocessors.</param>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.WithVariable(System.String,System.String)">
            <summary>
            Adds a variable to be substituted on Adhoc script
            </summary>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.ExecuteScalar(System.String,System.Func{System.String,System.Object}[])">
            <summary>
            Executes a scalar query.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.ExecuteNonQuery(System.String,System.Func{System.String,System.Object}[])">
            <summary>
            Executes a query that returns the number of records modified.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Helpers.AdHocSqlRunner.ExecuteReader(System.String,System.Func{System.String,System.Object}[])">
            <summary>
            Executes a select query or procedure.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="P:DbUp.Helpers.AdHocSqlRunner.Schema">
            <summary>
            Database Schema, should be null if database does not support schemas
            </summary>
        </member>
        <member name="T:DbUp.Engine.Output.ConsoleUpgradeLog">
            <summary>
            A log that writes to the console in a colorful way.
            </summary>
        </member>
        <member name="T:DbUp.Engine.Output.IUpgradeLog">
            <summary>
            Implemented by objects which record the internal details of the database migration.
            </summary>
        </member>
        <member name="M:DbUp.Engine.Output.IUpgradeLog.WriteInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.IUpgradeLog.WriteError(System.String,System.Object[])">
            <summary>
            Writes an error message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.IUpgradeLog.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.ConsoleUpgradeLog.WriteInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.ConsoleUpgradeLog.WriteError(System.String,System.Object[])">
            <summary>
            Writes an error message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.ConsoleUpgradeLog.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:DbUp.Engine.UpgradeEngine">
            <summary>
            This class orchestrates the database upgrade process.
            </summary>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.#ctor(DbUp.Builder.UpgradeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Engine.UpgradeEngine"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.IsUpgradeRequired">
            <summary>
            Determines whether the database is out of date and can be upgraded.
            </summary>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.TryConnect(System.String@)">
            <summary>
            Tries to connect to the database.
            </summary>
            <param name="errorMessage">Any error message encountered.</param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.PerformUpgrade">
            <summary>
            Performs the database upgrade.
            </summary>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.GetScriptsToExecute">
            <summary>
            Returns a list of scripts that will be executed when the upgrade is performed
            </summary>
            <returns>The scripts to be executed</returns>
        </member>
        <member name="M:DbUp.Engine.UpgradeEngine.MarkAsExecuted">
            <summary>
             Creates version record for any new migration scripts without executing them.
             Useful for bringing development environments into sync with automated environments
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbUp.Engine.DatabaseUpgradeResult">
            <summary>
            Represents the results of a database upgrade.
            </summary>
        </member>
        <member name="M:DbUp.Engine.DatabaseUpgradeResult.#ctor(System.Collections.Generic.IEnumerable{DbUp.Engine.SqlScript},System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Engine.DatabaseUpgradeResult"/> class.
            </summary>
            <param name="scripts">The scripts that were executed.</param>
            <param name="successful">if set to <c>true</c> [successful].</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:DbUp.Engine.DatabaseUpgradeResult.Scripts">
            <summary>
            Gets the scripts that were executed.
            </summary>
        </member>
        <member name="P:DbUp.Engine.DatabaseUpgradeResult.Successful">
            <summary>
            Gets a value indicating whether this <see cref="T:DbUp.Engine.DatabaseUpgradeResult"/> is successful.
            </summary>
        </member>
        <member name="P:DbUp.Engine.DatabaseUpgradeResult.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:DbUp.Engine.IScriptExecutor">
            <summary>
            This interface is implemented by classes that execute upgrade scripts against a database.
            </summary>
        </member>
        <member name="M:DbUp.Engine.IScriptExecutor.Execute(DbUp.Engine.SqlScript)">
            <summary>
            Executes the specified script against a database at a given connection string.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:DbUp.Engine.IScriptExecutor.Execute(DbUp.Engine.SqlScript,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Executes the specified script against a database at a given connection string.
            </summary>
            <param name="script">The script.</param>
            <param name="variables">Variables to replace in the script</param>
        </member>
        <member name="M:DbUp.Engine.IScriptExecutor.VerifySchema">
            <summary>
            Verifies the specified schema exists and is valid
            </summary>
        </member>
        <member name="P:DbUp.Engine.IScriptExecutor.ExecutionTimeoutSeconds">
            <summary>
            Timeout for each section of the script in seconds. If not set, the default timeout for the executor is used.
            </summary>
        </member>
        <member name="T:DbUp.ScriptProviders.EmbeddedScriptAndCodeProvider">
            <summary>
            An enhanced <see cref="T:DbUp.Engine.IScriptProvider"/> implementation which retrieves upgrade scripts or IScript code upgrade scripts embedded in an assembly.
            </summary>
        </member>
        <member name="T:DbUp.Engine.IScriptProvider">
            <summary>
            Provides scripts to be executed.
            </summary>
        </member>
        <member name="M:DbUp.Engine.IScriptProvider.GetScripts(DbUp.Engine.Transactions.IConnectionManager)">
            <summary>
            Gets all scripts that should be executed.
            </summary>
        </member>
        <member name="M:DbUp.ScriptProviders.EmbeddedScriptAndCodeProvider.#ctor(System.Reflection.Assembly,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.ScriptProviders.EmbeddedScriptProvider"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="filter">The embedded sql script filter.</param>
        </member>
        <member name="M:DbUp.ScriptProviders.EmbeddedScriptAndCodeProvider.GetScripts(DbUp.Engine.Transactions.IConnectionManager)">
            <summary>
            Gets all scripts that should be executed.
            </summary>
        </member>
        <member name="T:DbUp.Engine.Transactions.LegacySqlConnectionManager">
            <summary>
            Allows backwards compatibility with previous API/behaviour of using connection factories with DbUp
            </summary>
        </member>
        <member name="M:DbUp.Engine.Transactions.LegacySqlConnectionManager.#ctor(System.Func{System.Data.IDbConnection})">
            <summary>
            Ctor for LegacySqlConnectionManager
            </summary>
            <param name="connectionFactory">The connectionFactory</param>
        </member>
        <member name="F:DbUp.Support.ObjectNameOptions.None">
            <summary>
            No options are set.
            </summary>
        </member>
        <member name="F:DbUp.Support.ObjectNameOptions.Trim">
            <summary>
            Remove starting and ending white space from the object name.
            </summary>
        </member>
        <member name="M:DbUp.Support.SQLite.SQLiteObjectParser.QuoteSqlObjectName(System.String)">
            <summary>
            Quotes the name of the SQLite object in square brackets to allow Special characters in the object name.
            </summary>
            <param name="objectName">Name of the object to quote.</param>
            <returns>The quoted object name with trimmed whitespace</returns>
        </member>
        <member name="M:DbUp.Support.SQLite.SQLiteObjectParser.QuoteSqlObjectName(System.String,DbUp.Support.ObjectNameOptions)">
            <summary>
            Quotes the name of the SQLite object in square brackets to allow Special characters in the object name.
            </summary>
            <param name="objectName">Name of the object to quote.</param>
            <param name="objectNameOptions">The settings which indicate if the whitespace should be dropped or not.</param>
            <returns>The quoted object name</returns>
        </member>
        <member name="T:DbUp.Support.SQLite.SQLiteTableJournal">
            <summary>
            An implementation of the <see cref="T:DbUp.Engine.IJournal"/> interface which tracks version numbers for a 
            SQLite database using a table called SchemaVersions.
            </summary>
        </member>
        <member name="T:DbUp.Support.SqlServer.SqlTableJournal">
            <summary>
            An implementation of the <see cref="T:DbUp.Engine.IJournal"/> interface which tracks version numbers for a 
            SQL Server database using a table called dbo.SchemaVersions.
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlTableJournal.#ctor(System.Func{DbUp.Engine.Transactions.IConnectionManager},System.Func{DbUp.Engine.Output.IUpgradeLog},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Support.SqlServer.SqlTableJournal"/> class.
            </summary>
            <param name="connectionManager">The connection manager.</param>
            <param name="logger">The log.</param>
            <param name="schema">The schema that contains the table.</param>
            <param name="table">The table name.</param>
            <example>
            var journal = new TableJournal("Server=server;Database=database;Trusted_Connection=True", "dbo", "MyVersionTable");
            </example>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlTableJournal.GetExecutedScripts">
            <summary>
            Recalls the version number of the database.
            </summary>
            <returns>All executed scripts.</returns>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlTableJournal.GetExecutedScriptsSql(System.String)">
            <summary>
            The Sql which gets 
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlTableJournal.StoreExecutedScript(DbUp.Engine.SqlScript)">
            <summary>
            Records a database upgrade for a database specified in a given connection string.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlTableJournal.CreateTableSql(System.String)">
            <summary>
            The sql to exectute to create the schema versions table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DbUp.Support.SQLite.SQLiteTableJournal.#ctor(System.Func{DbUp.Engine.Transactions.IConnectionManager},System.Func{DbUp.Engine.Output.IUpgradeLog},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Support.SQLite.SQLiteTableJournal"/> class.
            </summary>
        </member>
        <member name="M:DbUp.Support.SQLite.SQLiteTableJournal.CreateTableSql(System.String)">
            <summary>
            Create table sql for SQLite
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DbUp.Support.SqlServer.SqlObjectParser">
            <summary>
            Parses Sql Objects and performs quoting functions
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlObjectParser.QuoteSqlObjectName(System.String)">
            <summary>
            Quotes the name of the SQL object in square brackets to allow Special characters in the object name.
            This function implements System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier() with an additional
            validation which is missing from the SqlCommandBuilder version.
            </summary>
            <param name="objectName">Name of the object to quote.</param>
            <returns>The quoted object name with trimmed whitespace</returns>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlObjectParser.QuoteSqlObjectName(System.String,DbUp.Support.ObjectNameOptions)">
            <summary>
            Quotes the name of the SQL object in square brackets to allow Special characters in the object name.
            This function implements System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier() with an additional
            validation which is missing from the SqlCommandBuilder version.
            </summary>
            <param name="objectName">Name of the object to quote.</param>
            <param name="objectNameOptions">The settings which indicate if the whitespace should be dropped or not.</param>
            <returns>The quoted object name</returns>
        </member>
        <member name="T:DbUp.Support.SqlServer.SqlScriptExecutor">
            <summary>
            A standard implementation of the IScriptExecutor interface that executes against a SQL Server 
            database.
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlScriptExecutor.#ctor(System.Func{DbUp.Engine.Transactions.IConnectionManager},System.Func{DbUp.Engine.Output.IUpgradeLog},System.String,System.Func{System.Boolean},System.Collections.Generic.IEnumerable{DbUp.Engine.IScriptPreprocessor})">
            <summary>
            Initializes an instance of the <see cref="T:DbUp.Support.SqlServer.SqlScriptExecutor"/> class.
            </summary>
            <param name="connectionManagerFactory"></param>
            <param name="log">The logging mechanism.</param>
            <param name="schema">The schema that contains the table.</param>
            <param name="variablesEnabled">Function that returns <c>true</c> if variables should be replaced, <c>false</c> otherwise.</param>
            <param name="scriptPreprocessors">Script Preprocessors in addition to variable substitution</param>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlScriptExecutor.Execute(DbUp.Engine.SqlScript)">
            <summary>
            Executes the specified script against a database at a given connection string.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlScriptExecutor.VerifySchema">
            <summary>
            Verifies the existence of targeted schema. If schema is not verified, will check for the existence of the dbo schema.
            </summary>
        </member>
        <member name="M:DbUp.Support.SqlServer.SqlScriptExecutor.Execute(DbUp.Engine.SqlScript,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Executes the specified script against a database at a given connection string.
            </summary>
            <param name="script">The script.</param>
            <param name="variables">Variables to replace in the script</param>
        </member>
        <member name="P:DbUp.Support.SqlServer.SqlScriptExecutor.ExecutionTimeoutSeconds">
            <summary>
            SQLCommand Timeout in seconds. If not set, the default SQLCommand timeout is not changed.
            </summary>
        </member>
        <member name="P:DbUp.Support.SqlServer.SqlScriptExecutor.Schema">
            <summary>
            Database Schema, should be null if database does not support schemas
            </summary>
        </member>
        <member name="T:DbUp.Engine.Preprocessors.VariableSubstitutionPreprocessor">
            <summary>
            Substitutes variables for values in SqlScripts
            </summary>
        </member>
        <member name="M:DbUp.Engine.Preprocessors.VariableSubstitutionPreprocessor.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Engine.Preprocessors.VariableSubstitutionPreprocessor"/> class.
            </summary>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:DbUp.Engine.Preprocessors.VariableSubstitutionPreprocessor.Process(System.String)">
            <summary>
            Substitutes variables 
            </summary>
            <param name="contents"></param>
        </member>
        <member name="T:DbUp.ScriptProviders.StaticScriptProvider">
            <summary>
            Allows you to easily programatically supply scripts from code.
            </summary>
        </member>
        <member name="M:DbUp.ScriptProviders.StaticScriptProvider.#ctor(System.Collections.Generic.IEnumerable{DbUp.Engine.SqlScript})">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.ScriptProviders.StaticScriptProvider"/> class.
            </summary>
            <param name="scripts">The scripts.</param>
        </member>
        <member name="M:DbUp.ScriptProviders.StaticScriptProvider.GetScripts(DbUp.Engine.Transactions.IConnectionManager)">
            <summary>
            Gets all scripts that should be executed.
            </summary>
        </member>
        <member name="T:DbUp.ScriptProviders.EmbeddedScriptProvider">
            <summary>
            The default <see cref="T:DbUp.Engine.IScriptProvider"/> implementation which retrieves upgrade scripts embedded in an assembly.
            </summary>
        </member>
        <member name="M:DbUp.ScriptProviders.EmbeddedScriptProvider.#ctor(System.Reflection.Assembly,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.ScriptProviders.EmbeddedScriptProvider"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:DbUp.ScriptProviders.EmbeddedScriptProvider.GetScripts(DbUp.Engine.Transactions.IConnectionManager)">
            <summary>
            Gets all scripts that should be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbUp.ScriptProviders.FileSystemScriptProvider">
            <summary>
             Alternate <see cref="T:DbUp.Engine.IScriptProvider"/> implementation which retrieves upgrade scripts via a directory
            </summary>
        </member>
        <member name="M:DbUp.ScriptProviders.FileSystemScriptProvider.#ctor(System.String)">
            <summary>
            </summary>
            <param name="directoryPath">Path to SQL upgrade scripts</param>
        </member>
        <member name="M:DbUp.ScriptProviders.FileSystemScriptProvider.GetScripts(DbUp.Engine.Transactions.IConnectionManager)">
            <summary>
            Gets all scripts that should be executed.
            </summary>
        </member>
        <member name="T:DbUp.Helpers.TemporarySqlDatabase">
            <summary>
            Used to create databases that are deleted at the end of a unit test.
            </summary>
        </member>
        <member name="M:DbUp.Helpers.TemporarySqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbUp.Helpers.TemporarySqlDatabase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DbUp.Helpers.TemporarySqlDatabase.Create">
            <summary>
            Creates the database.
            </summary>
        </member>
        <member name="M:DbUp.Helpers.TemporarySqlDatabase.Dispose">
            <summary>
            Deletes the database.
            </summary>
        </member>
        <member name="P:DbUp.Helpers.TemporarySqlDatabase.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:DbUp.Helpers.TemporarySqlDatabase.AdHoc">
            <summary>
            Gets a tool to run ad-hoc SQL queries.
            </summary>
            <value>The ad hoc.</value>
        </member>
        <member name="T:DbUp.Engine.Output.TraceUpgradeLog">
            <summary>
            A log that writes to System.Diagnostics.Trace.
            </summary>
        </member>
        <member name="M:DbUp.Engine.Output.TraceUpgradeLog.WriteInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.TraceUpgradeLog.WriteError(System.String,System.Object[])">
            <summary>
            Writes an error message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:DbUp.Engine.Output.TraceUpgradeLog.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:SqlServerExtensions">
            <summary>
            Configuration extension methods for SQL Server.
            </summary>
        </member>
        <member name="M:SqlServerExtensions.SqlDatabase(DbUp.Builder.SupportedDatabases,System.String)">
            <summary>
            Creates an upgrader for SQL Server databases.
            </summary>
            <param name="supported">Fluent helper type.</param>
            <param name="connectionString">The connection string.</param>
            <returns>
            A builder for a database upgrader designed for SQL Server databases.
            </returns>
        </member>
        <member name="M:SqlServerExtensions.SqlDatabase(DbUp.Builder.SupportedDatabases,System.String,System.String)">
            <summary>
            Creates an upgrader for SQL Server databases.
            </summary>
            <param name="supported">Fluent helper type.</param>
            <param name="connectionString">The connection string.</param>
            <param name="schema">The SQL schema name to use. Defaults to 'dbo'.</param>
            <returns>
            A builder for a database upgrader designed for SQL Server databases.
            </returns>
        </member>
        <member name="M:SqlServerExtensions.SqlDatabase(DbUp.Builder.SupportedDatabases,System.Func{System.Data.IDbConnection})">
            <summary>
            Creates an upgrader for SQL Server databases.
            </summary>
            <param name="supported">Fluent helper type.</param>
            <param name="connectionFactory">The connection factory.</param>
            <returns>
            A builder for a database upgrader designed for SQL Server databases.
            </returns>
        </member>
        <member name="M:SqlServerExtensions.SqlDatabase(DbUp.Builder.SupportedDatabases,System.Func{System.Data.IDbConnection},System.String)">
            <summary>
            Creates an upgrader for SQL Server databases.
            </summary>
            <param name="supported">Fluent helper type.</param>
            <param name="connectionFactory">The connection factory.</param>
            <param name="schema">The SQL schema name to use. Defaults to 'dbo'.</param>
            <returns>
            A builder for a database upgrader designed for SQL Server databases.
            </returns>
        </member>
        <member name="M:SqlServerExtensions.SqlDatabase(DbUp.Engine.Transactions.IConnectionManager,System.String)">
            <summary>
            
            </summary>
            <param name="connectionManager"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:SqlServerExtensions.JournalToSqlTable(DbUp.Builder.UpgradeEngineBuilder,System.String,System.String)">
            <summary>
            Tracks the list of executed scripts in a SQL Server table.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:DbUp.Builder.SupportedDatabases">
            <summary>
            Add extension methods to this type if you plan to add support for additional databases.
            </summary>
        </member>
    </members>
</doc>
